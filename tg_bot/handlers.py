import datetime
import asyncio
import hashlib

from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

import tg_bot.keyboards as kb

from db.models import Profile, Review, Feedback, Rating
from db.database import database

router = Router()


class Request(StatesGroup):
    name = State()
    password = State()
    custom_name = State()

    review = State()
    feedback = State()


# storing user profiles
users_cache: dict[int, Profile] = {}


async def delete_message_delayed(message: Message, delay: int):
    await asyncio.sleep(delay)
    await message.delete()


@router.message(CommandStart())
async def start(message: Message):
    await message.answer(
        '<b>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!‚ù§Ô∏è </b> \n\n–ü—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞—á–∞—Ç—å,–ø—Ä–æ—Å–∏–º –í–∞—Å –≤–æ–π—Ç–∏ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç.\n\n–î–ª—è —ç—Ç–æ–≥–æ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å',
        parse_mode='HTML', reply_markup=kb.login)


# button login, input name and password
@router.callback_query(F.data == 'login')
async def login(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Request.name)
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à <b>–ª–æ–≥–∏–Ω</b> <b>–≤</b> <b>LYE</b>', parse_mode='HTML')


@router.message(Request.name)
async def login_1(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(Request.password)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à <b>–ø–∞—Ä–æ–ª—å</b> <b>–≤</b> <b>LYE</b>', parse_mode='HTML')


@router.message(Request.password)
async def login_2(message: Message, state: FSMContext):
    data = await state.get_data()
    username = data.get('name')
    password = message.text

    user = database.get_profile_by_username(username)

    asyncio.create_task(delete_message_delayed(message, 2))

    hashed_password = hashlib.sha256(password.encode()).hexdigest()
    if user and user.password == hashed_password:

        current_date = datetime.date.today()

        if user.birthday.month == current_date.month and user.birthday.day == current_date.day:
            await message.answer(f'–° –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è! üéâ', parse_mode='HTML')

        await message.answer(
            f'–î–æ–±—Ä—ã–π –¥–µ–Ω—å, <b>{user.username}!</b>\n\n–£–¥–æ–±–Ω–æ –ª–∏ –í–∞–º, –µ—Å–ª–∏ –º—ã –±—É–¥–µ–º –∫ –≤–∞–º —Ç–∞–∫ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∏–ª–∏ –í—ã –≤–≤–µ–¥–µ—Ç–µ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç?',
            reply_markup=kb.general, parse_mode='HTML')

        users_cache[message.from_user.id] = user
    else:
        await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –≤ LYE',
                             reply_markup=kb.login)

    await state.set_state(None)


@router.callback_query(F.data == 'yes')
async def handle_yes(callback: CallbackQuery):
    await callback.message.answer(
        'üí´ <b>–°—É–ø–µ—Ä!</b> \n\n–°–∫–æ—Ä–µ–µ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –≤ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –≤–∞—Å —Ä–∞–∑–¥–µ–ª—ã –∏ –∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –Ω–∏–º–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ',
        parse_mode='HTML', reply_markup=kb.main)


@router.callback_query(F.data == 'no')
async def handle_no(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer('–•–æ—Ä–æ—à–æ, –ø—Ä–µ–¥–ª–æ–∂–∏—Ç–µ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è')
    await state.set_state(Request.custom_name)


@router.message(Request.custom_name)
async def custom_name(message: Message, state: FSMContext):
    await state.update_data(custom_name=message.text)
    await message.answer(
        f"–¢–µ–ø–µ—Ä—å —Ç–æ—á–Ω–æ –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, <b>{message.text}</b> ‚ò∫Ô∏è\n\n–ù–∏–∂–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –≤–∞—Å —Ä–∞–∑–¥–µ–ª—ã –∏ \n–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –Ω–∏–º–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ",
        reply_markup=kb.main, parse_mode='HTML')
    await state.set_state(None)


@router.message(F.text == '–û—Ü–µ–Ω–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ü§©')
async def rating(message: Message):
    await message.answer(
        'üìç<b>LYE</b> - —ç—Ç–æ –ø—Ä–µ–∂–¥–µ –≤—Å–µ–≥–æ –ø—Ä–æ –ª—é–¥–µ–π,–ø—Ä–æ –∏—Ö —á—É–≤—Å—Ç–≤–∞ –∏ –º—É–∑—ã–∫—É!\n\n <b>–ù–∞—à–∞ —Ü–µ–ª—å</b> - –ø–æ–º–æ—á—å –≤–∞–º —É—Å–ª—ã—à–∞—Ç—å —Å–µ–±—è –∏ –Ω–∞–º –±—ã–ª–æ –±—ã –æ—á–µ–Ω—å –ø—Ä–∏—è—Ç–Ω–æ,–µ—Å–ª–∏ –±—ã –í—ã –æ—Ü–µ–Ω–∏–ª–∏ –Ω–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ç–∑—ã–≤. \n\n –¢–∞–∫ –º—ã —Å–º–æ–∂–µ–º —Å—Ç–∞—Ç—å –µ—â–µ –±–ª–∏–∂–µ!',
        reply_markup=kb.rating, parse_mode='HTML')


text = '<b>Listen your emotion</b> - —ç—Ç–æ –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –ª–∏—Ü –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —ç–º–æ—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–¥–±–æ—Ä–∞ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Ç—Ä–µ–∫–∞. \n\n–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ <b>–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –ª–∏—Ü–∞</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, –ø–æ—Å–ª–µ —á–µ–≥–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç –º—É–∑—ã–∫—É, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —ç—Ç–∏–º —ç–º–æ—Ü–∏—è–º.\n\n–ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–ª—ã–±–∞–µ—Ç—Å—è, –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –º–æ–∂–µ—Ç –≤–∫–ª—é—á–∏—Ç—å –≤–µ—Å–µ–ª—É—é –∏ –∂–∏–∑–Ω–µ—Ä–∞–¥–æ—Å—Ç–Ω—É—é –º—É–∑—ã–∫—É, –∞ –µ—Å–ª–∏ –æ–Ω –≤—ã–≥–ª—è–¥–∏—Ç –∑–∞–¥—É–º—á–∏–≤—ã–º –∏–ª–∏ –≥—Ä—É—Å—Ç–Ω—ã–º, —Ç–æ –≤—ã–±–µ—Ä–µ—Ç —Ç—Ä–µ–∫–∏ —Å –±–æ–ª–µ–µ —Å–ø–æ–∫–æ–π–Ω—ã–º –∏ –º–µ–ª–∞–Ω—Ö–æ–ª–∏—á–Ω—ã–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ–º.\n\n–≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ª–∏—á–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ö–æ—á–µ—Ç –±—ã—Å—Ç—Ä–æ –Ω–∞–π—Ç–∏ –º—É–∑—ã–∫—É, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∏—Ö —Ç–µ–∫—É—â–µ–º—É –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é, –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –≤—ã–±–∏—Ä–∞—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç—ã –∏–ª–∏ –∂–∞–Ω—Ä—ã. \n\nListen your emotion –ø–æ–º–æ–∂–µ—Ç —Å–æ–∑–¥–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â—É—é –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –∏ –ø–æ–º–æ–∂–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞—Å–ª–∞–¥–∏—Ç—å—Å—è –º—É–∑—ã–∫–æ–π –≤ –ø–æ–ª–Ω–æ–π –º–µ—Ä–µ'


@router.message(F.text == '–û –Ω–∞—Å ‚ùì')
async def about(message: Message):
    await message.answer(text, reply_markup=kb.main, parse_mode='HTML')


# review
@router.callback_query(F.data == 'words')
async def number(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Request.review)
    await callback.message.answer('–ù–∞–º –≤–∞–∂–Ω–æ –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ. –û—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π –æ—Ç–∑—ã–≤ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞')


@router.message(Request.review)
async def custom_name(message: Message, state: FSMContext):
    text = message.text
    tg_user_id = message.from_user.id

    review = Review(
        user_id=users_cache[tg_user_id].id,
        text=text
    )
    database.insert_review(review)

    await message.answer(f"–°–ø–∞—Å–∏–±–æ, –≤–∞—à –æ—Ç–∑—ã–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!", parse_mode='HTML')
    await state.set_state(None)


# support chat
@router.message(F.text == '–ß–∞—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π ü´∂')
async def feedback_callback(message: Message, state: FSMContext):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∂–∞–ª–æ–±—É. –ù–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–≤–µ—Ç—è—Ç –≤–∞–º –≤ —Ç–µ—á–µ–Ω–∏–∏ –¥–Ω—è!')
    await state.set_state(Request.feedback)


@router.message(Request.feedback)
async def feedback_text(message: Message, state: FSMContext):
    text = message.text
    tg_user_id = message.from_user.id

    feedback = Feedback(
        user_id=users_cache[tg_user_id].id,
        text=text
    )
    database.insert_feedback(feedback)

    await message.answer("–°–ø–∞—Å–∏–±–æ!\n\n–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞—à–∏–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º!")
    await state.set_state(None)


# for rating

@router.callback_query(F.data == 'number')
async def number(callback: CallbackQuery):
    await callback.message.answer(
        '–ú—ã –±—ã –æ—á–µ–Ω—å —Ö–æ—Ç–µ–ª–∏, —á—Ç–æ–±—ã –Ω–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–º–æ–≥–ª–æ –í–∞–º —É—Å–ª—ã—à–∞—Ç—å –í–∞—à—É —ç–º–æ—Ü–∏—é ‚ò∫Ô∏è \n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –Ω–∞—Å:',
        reply_markup=kb.rate)


@router.callback_query(F.data.in_(('11', '12', '13', '14', '15')))
async def number(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer('–û—Ü–µ–Ω–∏—Ç–µ –≤ —Å—Ä–µ–¥–Ω–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –º—É–∑—ã–∫–∏ –≤–∞—à–µ–º—É –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é', reply_markup=kb.service)
    user_id = callback.from_user.id
    data = callback.data
    r = int(data[-1])
    await state.update_data(general_rating=r)


@router.callback_query(F.data.in_(('21', '22', '23', '24', '25')))
async def number(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer('–û—Ü–µ–Ω–∏—Ç–µ —Å–∞–º–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å', reply_markup=kb.interface)
    data = callback.data
    r = int(data[-1])
    await state.update_data(service_rating=r)


@router.callback_query(F.data.in_(('31', '32', '33', '34', '35')))
async def number(callback: CallbackQuery, state: FSMContext):
    tg_user_id = callback.from_user.id
    data = callback.data
    interface = int(data[-1])

    state_data = await state.get_data()
    general = state_data.get('general_rating')
    service = state_data.get('service_rating')

    record_rating(
        users_cache[tg_user_id].id,
        general,
        service,
        interface
    )

    avg = (general + interface + service) / 3.0

    await callback.message.answer(f'<b>–°–ø–∞—Å–∏–±–æ!‚ù§Ô∏è </b>\n\n–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {avg:.2f}', parse_mode='HTML')


def record_rating(user_id, general, service, interface):
    rating = Rating(
        user_id=user_id,
        general=general,
        service=service,
        interface=interface
    )

    database.insert_rating(rating)
